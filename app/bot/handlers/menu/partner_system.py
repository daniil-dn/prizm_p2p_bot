import asyncio

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.handlers.menu.states import WithdrawPartner, AddChannel
from app.bot.ui import get_menu_kb
from app.bot.ui.partner_system import withdraw_partner_balance, admin_withdrawal_done, cancel_partner_system
from app.bot.ui.withdraw import cancel_withdraw
from app.bot.utils.parce import get_partner_data
from app.core.dao import crud_user, crud_settings
from app.core.dao.crud_withdraw_ref import crud_withdraw_ref
from app.core.dto.withdraw_ref import WithdrawRefCreate
from app.core.models import User
from app.utils.text_check import check_wallet_format, check_interval

router = Router()


@router.callback_query(F.data == 'partner_system')
async def ask_how_many(callback: CallbackQuery, bot: Bot, session: AsyncSession, user_db: User):
    me = await bot.get_me()
    link = f'https://t.me/{me.username}' + '?start=' + hex(callback.from_user.id)

    data = await get_partner_data(session, callback.from_user.id)

    count_users = data.get('count_users', None)

    if count_users:
        text = (f'–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {count_users}\n'
                f'–ò—Ö —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±–æ—Ä–æ—Ç: {data["summ"]:.3f} PZM\n'
                f'–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_db.referral_balance:.3f} PZM')
    else:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    await callback.message.answer("–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏ "
                                  "–Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Å –æ–±–æ—Ä–æ—Ç–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
                                  f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ (üëá–Ω–∞–∂–º–∏):\n<code>{link}</code>\n\n{text}",
                                  reply_markup=withdraw_partner_balance,
                                  parse_mode='html')


@router.callback_query(F.data == 'withdraw_partner_balance')
async def get_summ_to_output(callback: CallbackQuery, state: FSMContext, user_db: User, session: AsyncSession):
    admin_settings = await crud_settings.get_by_id(session, id=1)
    if user_db.referral_balance < admin_settings.minimum_referal_withdrawal_amount:
        await callback.answer('–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç —Ç—ã—Å—è—á–∏ prizm', show_alert=True)
        return

    await state.set_state(WithdrawPartner.get_count_money)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞. –û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω '
                                  '–≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫ –≤—ã–≤–æ–¥—É - 1000 prizm')


@router.message(WithdrawPartner.get_count_money)
async def check_input_and_ask_address(message: Message, state: FSMContext, user_db: User, session: AsyncSession):
    try:
        amount = float(message.text)
    except:
        await message.answer('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=cancel_withdraw)
        return
    admin_settings = await crud_settings.get_by_id(session, id=1)
    if amount > user_db.referral_balance or amount < admin_settings.minimum_referal_withdrawal_amount:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±–æ–ª—å—à–µ 1000', reply_markup=cancel_withdraw)
        return

    await state.set_data({'amount': amount})
    await state.set_state(WithdrawPartner.get_prizm_address)

    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: PRIZM-****-****-****-****',
                         reply_markup=cancel_withdraw)


@router.message(WithdrawPartner.get_prizm_address)
async def check_input_and_withdraw_balance(message: Message, state: FSMContext,
                                           session: AsyncSession, bot: Bot, user_db: User):
    if not check_wallet_format(message.text):
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: PRIZM-****-****-****-****',
                             reply_markup=cancel_withdraw)
        return

    amount = await state.get_value('amount')
    main_admins = await crud_user.get_main_admins(session)

    data = await get_partner_data(session, message.from_user.id)

    summ = data.get('summ', None)
    count_users = data.get('count_users', None)
    count_orders = data.get('count_orders', None)
    percent = data.get('percent', None)

    withdraw_create = WithdrawRefCreate(user_id=message.from_user.id, summ=amount)
    await crud_withdraw_ref.create(session, obj_in=withdraw_create)
    await crud_user.decrease_referral_balance(session, id=message.from_user.id, summ=amount)

    try:
        await message.answer('–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å')
        for main_admin in main_admins:
            await bot.send_message(main_admin.id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n'
                                                       f'User: @{message.from_user.username} ({message.from_user.id})\n'
                                                       f'–ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö {count_users}\n'
                                                       f'–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {count_orders}\n'
                                                       f'–û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {summ:.3f} PZM\n'
                                                       f'–ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ {percent * 100:.1f}\n'
                                                       f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_db.referral_balance:.3f} PZM\n'
                                                       f'–ö–æ—à–µ–ª–µ–∫: {message.text}')

            await bot.send_message(main_admin.id, text=f'{message.text}',
                                   reply_markup=admin_withdrawal_done(message.from_user.id))
            await asyncio.sleep(0.5)
    except:
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    await state.clear()


@router.callback_query(F.data.startswith('admin-done-partner-withdraw-request'))
async def admin_done_order(callback: CallbackQuery, state: FSMContext, user_db: User, session: AsyncSession):
    user_id = callback.data.split('_')[1]
    client_user_db = await crud_user.get_by_id(session, id=int(user_id))
    await callback.bot.send_message(user_id, 'üí∞–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ú–æ–Ω–µ—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ—à–µ–ª–µ–∫.')
    await callback.message.edit_reply_markup(None)
    await callback.message.reply('‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω!',
                                 reply_markup=get_menu_kb(is_admin=user_db.role in User.ALL_ADMINS))


# –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –≥—Ä—É–ø–ø


@router.callback_query(F.data == 'group_channel_owners')
async def group_channel_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    await callback.message.answer(
        '–ù–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É PZM –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ '
        '–∫–∞–Ω–∞–ª–µ, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞ Coinmarketcap. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è '
        '—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—à –±–æ—Ç. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –í–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –í–∞—à–µ–π '
        '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. \n\n–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –≤ 3 —à–∞–≥–∞:\n\n'
        f'1. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ {(await bot.get_me()).url} –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞\n\n'
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª\n\n3', reply_markup=cancel_partner_system)
    await state.set_state(AddChannel.get_link)


@router.message(AddChannel.get_link, F.text)
async def save_link(message: Message, state: FSMContext, bot: Bot):
    if not message.text.startswith('https://t.me/') or not message.text.startswith('t.me/'):
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É', reply_markup=cancel_partner_system)
        return

    await state.update_data(link=message.text)
    await state.set_state(AddChannel.get_count_in_day)
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_count_in_day)
async def save_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=cancel_partner_system)
        return

    await state.update_data(count_in_day=int(message.text))
    await state.set_state(AddChannel.get_interval)
    await message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_interval)
async def save_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=cancel_partner_system)
        return

    await state.update_data(interval=int(message.text))
    await state.set_state(AddChannel.get_interval_in_day)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ –º—Å–∫ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00-21:00)', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_interval_in_day)
async def save_count(message: Message, state: FSMContext):
    if check_interval(message.text):
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00-21:00)', reply_markup=cancel_partner_system)
        return

    interval_in_day = message.text
    interval = await state.get_value('interval')
    count_in_day = await state.get_value('count_in_day')
    link = await state.get_value('link')
    await state.clear()
    await message.answer('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à–∞ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞')