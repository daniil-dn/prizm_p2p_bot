from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ChatMemberAdministrator
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.handlers.partner_system.states import AddChannel
from app.bot.ui.partner_system import cancel_partner_system, accept_add_bot
from app.core.dao import crud_chat_channel
from app.core.dto import ChatChannelCreate
from app.utils.text_check import check_interval

router = Router()


@router.callback_query(F.data == 'add_channel')
async def group_channel_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    await callback.message.answer(
        '–ù–∞—à –±–æ—Ç –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É PZM –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ '
        '–∫–∞–Ω–∞–ª–µ, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –Ω–∞ Coinmarketcap. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è '
        '—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—à –±–æ—Ç. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –í–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –±–æ—Ç–∞ –ø–æ –í–∞—à–µ–π '
        '—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. \n\n–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –≤ 3 —à–∞–≥–∞:\n\n'
        f'1. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ {(await bot.get_me()).url} –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞\n\n'  # —Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏—Ç—å
        '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ: @username_to_id_bot',
        reply_markup=cancel_partner_system)
    await state.set_state(AddChannel.get_chat_channel_id)


@router.message(AddChannel.get_chat_channel_id, F.text)
async def save_link(message: Message, state: FSMContext, bot: Bot):
    if message.text[0] != '-' or not message.text[1:].isdigit():
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–¥–∏', reply_markup=cancel_partner_system)
        return

    await state.update_data(chat_channel_id=int(message.text))
    await state.set_state(AddChannel.accept)
    await message.answer('–¢–µ–∫—Å—Ç', reply_markup=accept_add_bot)  # todo


@router.callback_query(F.data == 'add_bot', AddChannel.accept)
async def accept_add_bot_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        assert isinstance(await bot.get_chat_member(await state.get_value('chat_channel_id'), bot.id),
                          ChatMemberAdministrator)
    except:
        await callback.message.answer('–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', reply_markup=accept_add_bot)
        return

    await state.set_state(AddChannel.get_count_in_day)
    await callback.message.answer('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_count_in_day)
async def save_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=cancel_partner_system)
        return

    await state.set_state(AddChannel.get_interval)
    await state.update_data(count_in_day=int(message.text))
    await message.answer('–ö–∞–∫ —á–∞—Å—Ç–æ –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ–ª–∂–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_interval)
async def save_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ', reply_markup=cancel_partner_system)
        return

    await state.update_data(interval=int(message.text))
    await state.set_state(AddChannel.get_interval_in_day)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ –º—Å–∫ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00-21:00)', reply_markup=cancel_partner_system)


@router.message(AddChannel.get_interval_in_day)
async def save_count(message: Message, state: FSMContext, session: AsyncSession):
    if not check_interval(message.text):
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 09:00-21:00)',
                             reply_markup=cancel_partner_system)
        return

    chat_channel_id = await state.get_value('chat_channel_id')
    count_in_day = await state.get_value('count_in_day')
    interval = await state.get_value('interval')
    interval_in_day = message.text
    create_chat_channel = ChatChannelCreate(user_id=message.from_user.id,
                                            id=chat_channel_id,
                                            count_in_day=count_in_day,
                                            interval=interval,
                                            is_bot_admin=True,
                                            interval_in_day=interval_in_day
                                            )

    await crud_chat_channel.create(session, obj_in=create_chat_channel)
    await state.clear()
    await message.answer('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à–∞ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞')
